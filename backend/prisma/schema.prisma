generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(100)
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  courses   Course[]
  labs      Lab[]
  
  @@unique(fields: [email], name:email)
}

model Professor {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(100)
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  courses   Course[]
  labs      Lab[]

  @@unique(fields: [email], name:email)
}

model Course {
  id         Int         @id @default(autoincrement())
  courseId   String
  courseName String
  section    String?
  school     String?
  zoomLink   String?
  days       String[]
  startDate  DateTime    @db.Date
  endDate    DateTime    @db.Date
  startTime  DateTime    @db.Timetz(6)
  endTime    DateTime    @db.Timetz(6)
  labs       Lab[]
  lectures   Lecture[]
  professor  Professor[]
  students   Student[]

  @@unique([courseId, courseName, section], name: "Course.courseId_courseName_section_unique")
}

model Lab {
  id          Int         @id @default(autoincrement())
  courseId    Int?
  section     String?
  labStyle    labStyle    @default(Hybrid)
  days        String[]
  startDate   DateTime    @db.Date
  endDate     DateTime    @db.Date
  startTime   DateTime    @db.Timetz(6)
  endTime     DateTime    @db.Timetz(6)
  zoomLink    String?
  course      Course?     @relation(fields: [courseId], references: [id])
  instructors Professor[]
  students    Student[]
}

model Lecture {
  id           Int          @id @default(autoincrement())
  lectureStyle lectureStyle @default(Hybrid)
  courseId     Int?
  zoomLink     String?
  day          String?
  lectureDate  DateTime     @db.Date
  startTime    DateTime?    @db.Timestamptz(6)
  endTime      DateTime?    @db.Timestamptz(6)
  course       Course?      @relation(fields: [courseId], references: [id])
}

enum labStyle {
  InPerson
  Hybrid
  Remote
}

enum lectureStyle {
  InPerson
  Hybrid
  Remote
}
