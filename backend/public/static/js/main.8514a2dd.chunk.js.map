{"version":3,"sources":["components/Day.js","features/calendar/Calendar.js","components/HeaderNav.js","App.js","reportWebVitals.js","index.js"],"names":["Day","props","state","courselist","assgn","test","a","this","Grid","Row","className","today","day","date","map","e","i","React","Component","Calendar","setDayRef","el","expandRef","Date","days","format","createRef","console","log","wrapper","day_list","month","getDate","ref","Math","random","addDays","push","narrow","aria-label","Column","lg","md","sm","Slider","ariaLabelInput","max","min","value","onChange","setState","onClick","expandDay","HeaderNav","SideNav","isFixedNav","expanded","isChildOfHeader","App","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8514a2dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, Grid, Row } from 'carbon-components-react';\nimport api from '../apiHandle';\n\n\nclass Day extends React.Component {\n    constructor(props){\n        super(props)\n        this.state= {\n            courselist: [],\n            assgn: [],\n        }\n        this.test = false;\n    }\n\n    async componentDidMount() {\n        // await api.getStudentCourses(\"mlin2022@bu.edu\").then(res => {\n        //     let courses = res.data.courses\n        //     // console.log(courses)\n\n        //     const inDays = courses.map(e => { //map each course to a promise\n        //         const check =  api.getLectureDates(e.course).then(lecture => { //promise to get class days\n        //             console.log(lecture)\n        //             var days;\n        //             days = lecture.data.dates.map(e => e.date.substring(0,3)) //parse lecture days of course\n        //             // console.log(days)\n        //             // console.log(this.props.day)\n        //             // console.log(days.includes(this.props.day))\n\n        //             //return if course is on this day (bool) and course name in array\n        //             return [days.includes(this.props.day), e.course]\n        //         })\n        //         return check\n        //     })\n        //     return inDays \n        // //Promise.all takes array of promises and evaluate to single array of evaluated promises\n        // }).then(res => Promise.all(res).then(vals => { \n        //     this.setState({\n        //         courselist: vals.filter(e => { //e == ['T/F', lectuteName]\n        //             let mapping = e\n        //             return mapping[0] //filter out results not on today\n        //         }).map(course => {\n        //             let arr = course\n        //             return arr[1] //parse out name of course to set state with\n        //         })\n        //     })\n        // }))\n        \n    }\n\n    render() {\n        var { courselist } = this.state;\n\n        return(\n            <Grid>\n                <Row>\n                    <div className={this.props.today ? 'blue' : 'black'}>\n                        <h3>{this.props.day}</h3>\n                    </div>\n                </Row>\n\n                <Row>\n                <div className={this.props.today ? 'blue' : 'black'}> \n                    <h4>{this.props.date}</h4>\n                </div>\n                </Row>\n                {courselist.map((e, i) => { return (\n                    <Row key={i}\n                    className=\"course\">\n                    {e}\n                </Row>\n                )})}\n                    {/* {console.log(courselist)} */}\n            </Grid>\n            \n        )\n }}\n\nexport default Day\n","import React from 'react'\nimport { \n    Slider,\n    Grid,\n    Row,\n    Column\n } from 'carbon-components-react'\nimport { addDays, format } from 'date-fns'\nimport Day from '../../components/Day'\nimport './calendar.scss'\n\n\n\nclass Calendar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            today: new Date(),\n            days:3\n        }\n        this.date = format(this.state.today, 'd')\n        this.expandRef = React.createRef()\n\n    }\n\n    setDayRef = el => {\n        this.expandRef = el\n    }\n\n    shouldComponentUpdate(){\n        return ( this.state.days > 0)\n    }\n\n    hello() {\n        console.log('I was triggered during render');\n\n    }\n\n    expandDay() {\n        \n        const wrapper = this.expandRef;\n        // wrapper.classList.toggle('is-expanded')\n        console.log(wrapper)\n    }\n\n    render(){\n        const day_list = []\n        for (let i = 0; i < this.state.days; i++) {\n            let day = i === 0 ? <Day \n                                    key={Math.random()}\n                                    className=\"a-day\" \n                                    today={true} \n                                    month={format(this.state.today, 'LLL')} \n                                    date={this.state.today.getDate()}\n                                    day={format(this.state.today, 'EEE')}\n                                    ref={this.setDayRef}\n                                    />\n                                     :\n                <Day className=\"a-day\" \n                    key={i}\n                    today={false}\n                    month={format(addDays(this.state.today, i), 'LLL')} \n                    date={ addDays(this.state.today, i).getDate()}\n                    day={format(addDays(this.state.today, i), 'EEE')}\n                    ref={this.setDayRef}\n                    \n                    /> \n            day_list.push(day)\n        }\n\n        return(\n                <Grid className=\"bx--grid calendar-contain\" narrow={true}>\n                    <Row>\n                        {/*TODO: do a terneary operation is addDay.month == this.date.month ? show new month after emdash : don't show month */}\n                        <h4 aria-label=\"calendar\" className=\"calendar-title\"> {format(this.state.today, 'LLLL')} {this.date} \n                        {this.state.days > 1 ? \" â€” \" + format(addDays(this.state.today, this.state.days), 'LLLL') + \" \" + addDays(this.state.today, (this.state.days - 1)).getDate() : \"\" }\n                        \n                        </h4>\n                    </Row>\n                    <Row className=\"slider-row\">\n                        <Column lg={4} md={2} sm={0}>\n                            <div>\n                                <p>{this.state.days} days</p>\n                                <Slider\n                                ariaLabelInput=\"day slider\"\n                                className=\"day-slider \"\n                                max={5}\n                                min={1}\n                                value={3}\n                                onChange={({ value }) => this.setState({days: value})}\n                                />\n                            </div>\n\n                            \n                        </Column>\n                    </Row>\n                    <Row className=\"date-head\" >\n                        {day_list.map(el =>\n                            <Column \n                                key={el.props.date}\n                                className=\"a-day\"\n                                onClick={() => this.expandDay()}\n                            > \n                                    {el}\n\n                                 {/* {el} */}\n                            </Column>\n                        )}\n                    </Row>\n                </Grid>            \n        )\n    }\n\n\n\n}\n\nexport default Calendar","import { \n    SideNav,\n} from 'carbon-components-react';\n\nfunction HeaderNav() {\n\n    return (\n        <div className=\"App\">\n            <SideNav\n                isFixedNav\n                expanded={true}\n                isChildOfHeader={false}\n                aria-label=\"Side navigation\">\n            </SideNav>\n\n            \n            \n        </div>\n    );\n}\n\nexport default HeaderNav;","\nimport './App.scss';\n// import getHello from \"./apiHandle\"\n// import React, { useState, useEffect } from 'react';\nimport Calendar from './features/calendar/Calendar'\nimport HeaderNav from './components/HeaderNav'\nimport { Content } from 'carbon-components-react';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {/* TODO: collapsible nav and grid-expand transition */}\n      <HeaderNav/>\n      <Content>\n        <Calendar/>\n      </Content>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import 'node_modules/core-js/modules/es7.array.includes';\n// import 'node_modules/core-js/modules/es6.array.fill';\n// import 'node_modules/core-js/modules/es6.string.includes';\n// import 'node_modules/core-js/modules/es6.string.trim';\n// import 'node_modules/core-js/modules/es7.object.values';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}