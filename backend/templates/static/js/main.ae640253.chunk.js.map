{"version":3,"sources":["apiHandle.js","components/Day.js","features/calendar/Calendar.js","components/HeaderNav.js","App.js","reportWebVitals.js","index.js"],"names":["config","headers","mail","axios","post","name","then","res","Day","props","state","courselist","assgn","test","a","api","data","courses","map","e","course","lecture","dates","date","substring","includes","day","Promise","all","vals","setState","filter","this","Grid","Row","month","className","today","console","log","React","Component","Calendar","Date","days","format","day_list","i","addDays","getDate","Math","random","push","narrow","aria-label","Column","lg","md","sm","Slider","ariaLabelInput","max","min","value","onChange","el","HeaderNav","Header","HeaderName","href","prefix","SideNav","isFixedNav","expanded","isChildOfHeader","App","Content","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae640253.chunk.js","sourcesContent":["import axios from 'axios'\n\nvar config = { headers: {  \n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'}\n}\n\nconst getHello = () => {\n    return axios.get(\"/students\")\n};\n\nconst getCourses = () => {\n    return axios.get('/courses', config)\n};\n\nconst getStudentCourses = (mail) => {\n    return axios.post('/studentCourses', \n        {\n            \"email\": mail\n        }\n      , config)\n};\n\nconst getLectureDates = (name) => {\n    return axios.post('/courseLecturesName', \n        {\n            \"coursename\": name\n        }\n      , config).then(res => res)\n};\n\n\n\n\nexport default {\n    getHello,\n    getStudentCourses,\n    getCourses,\n    getLectureDates\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, Grid, Row } from 'carbon-components-react';\nimport api from '../apiHandle';\n\n\nclass Day extends React.Component {\n    constructor(props){\n        super(props)\n        this.state= {\n            courselist: [],\n            assgn: [],\n        }\n        this.test = false;\n    }\n\n    async componentDidMount() {\n        await api.getStudentCourses(\"mlin2022@bu.edu\").then(res => {\n            let courses = res.data.courses\n            // console.log(courses)\n\n            const inDays = courses.map(e => { //map each course to a promise\n                const check =  api.getLectureDates(e.course).then(lecture => { //promise to get class days\n                    var days;\n                    days = lecture.data.dates.map(e => e.date.substring(0,3)) //parse lecture days of course\n                    // console.log(days)\n                    // console.log(this.props.day)\n                    // console.log(days.includes(this.props.day))\n\n                    //return if course is on this day (bool) and course name in array\n                    return [days.includes(this.props.day), e.course]\n                })\n                return check\n            })\n            return inDays \n        //Promise.all takes array of promises and evaluate to single array of evaluated promises\n        }).then(res => Promise.all(res).then(vals => { \n            this.setState({\n                courselist: vals.filter(e => { //e == ['T/F', lectuteName]\n                    let mapping = e\n                    return mapping[0] //filter out arrays not on today\n                }).map(course => {\n                    let arr = course\n                    return arr[1] //parse out name of course to set state with\n                })\n            })\n        }))\n\n        \n    }\n\n    render() {\n        var { courselist } = this.state;\n\n        return(\n            <Grid>\n                <Row>\n                    {this.props.month}\n                </Row>\n\n                <Row>\n                <div className={this.props.today ? 'blue' : 'black'}> {this.props.date}</div>\n                </Row>\n                <Row>   \n                    {courselist}\n                    {console.log(courselist)}\n                </Row>\n            </Grid>\n            \n        )\n }}\n\nexport default Day\n","import React from 'react'\nimport { \n    Slider,\n    Grid,\n    Row,\n    Column\n } from 'carbon-components-react'\nimport { addDays, format } from 'date-fns'\nimport Day from '../../components/Day'\nimport './calendar.scss'\n\n\n\nclass Calendar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            today: new Date(),\n            days:3\n        }\n        this.date = format(this.state.today, 'd')\n\n    }\n\n    shouldComponentUpdate(){\n        return ( this.state.days > 0)\n    }\n\n    hello() {\n        console.log('I was triggered during render');\n\n    }\n\n    render(){\n        const day_list = []\n        for (let i = 0; i < this.state.days; i++) {\n            let day = i === 0 ? <Day \n                                    className=\"a-day\" \n                                    key={Math.random()} \n                                    today={true} \n                                    month={format(addDays(this.state.today, i), 'LLL')} \n                                    date={this.state.today.getDate()}\n                                    day={format(this.state.today, 'EEE')}/>\n                                     :\n                <Day className=\"a-day\" \n                    key={Math.random()} \n                    today={false}\n                    month={format(addDays(this.state.today, i), 'LLL')} \n                    date={ addDays(this.state.today, i).getDate()}\n                    day={format(addDays(this.state.today, i), 'EEE')}/> \n            day_list.push(day)\n        }\n\n        return(\n                <Grid className=\"bx--grid calendar-contain\" narrow={true}>\n                    <Row>\n                        {/*TODO: do a terneary operation is addDay.month == this.date.month ? show new month after emdash : don't show month */}\n                        <h4 aria-label=\"calendar\" className=\"calendar-title\"> {format(this.state.today, 'LLLL')} {this.date} \n                        {this.state.days > 1 ? \" â€” \" + format(addDays(this.state.today, this.state.days), 'LLLL') + \" \" + addDays(this.state.today, (this.state.days - 1)).getDate() : \"\" }\n                        \n                        </h4>\n                    </Row>\n                    <Row className=\"slider-row\">\n                        <Column lg={4} md={2} sm={0}>\n                            <div>\n                                <p>{this.state.days} days</p>\n                                <Slider\n                                ariaLabelInput=\"day slider\"\n                                className=\"day-slider \"\n                                max={5}\n                                min={1}\n                                value={3}\n                                onChange={({ value }) => this.setState({days: value})}\n                                />\n                            </div>\n\n                            \n                        </Column>\n                    </Row>\n                    <Row className=\"date-head\">\n                        {day_list.map(el => \n                            <Column> \n                             {el}\n                            </Column>\n                        )}\n                    </Row>\n                </Grid>            \n        )\n    }\n\n\n\n}\n\nexport default Calendar","import { \n    Header, \n    HeaderName, \n    SideNav,\n} from 'carbon-components-react';\n\nfunction HeaderNav() {\n\n    return (\n        <div className=\"App\">\n            <Header aria-label=\"Cadre home\">\n            <HeaderName href=\"#\" prefix=\"Cadre\">[hello]</HeaderName>\n            <SideNav isFixedNav\n            expanded={true}\n            isChildOfHeader={true}>\n            </SideNav>\n\n            </Header>\n            \n            \n        </div>\n    );\n}\n\nexport default HeaderNav;","\nimport './App.scss';\n// import getHello from \"./apiHandle\"\n// import React, { useState, useEffect } from 'react';\nimport Calendar from './features/calendar/Calendar'\nimport HeaderNav from './components/HeaderNav'\nimport { Content } from 'carbon-components-react';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      {/* TODO: collapsible nav and grid-expand transition */}\n      <HeaderNav/>\n      <Content>\n        <Calendar/>\n      </Content>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import 'node_modules/core-js/modules/es7.array.includes';\n// import 'node_modules/core-js/modules/es6.array.fill';\n// import 'node_modules/core-js/modules/es6.string.includes';\n// import 'node_modules/core-js/modules/es6.string.trim';\n// import 'node_modules/core-js/modules/es7.object.values';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}